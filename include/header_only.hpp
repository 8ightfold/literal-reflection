#ifndef STATIC_REFLECTION_COMPILER_MACROS_H
#define STATIC_REFLECTION_COMPILER_MACROS_H

#if defined(__clang__)
#  define COMPILER_CLANG
#elif defined(__GNUC__)
#  define COMPILER_GCC
#elif defined(_MSC_VER) || defined(_MSVC_LANG)
#  define COMPILER_MSVC
#elif defined(__INTEL_COMPILER)
#  define COMPILER_ICC
#else
#  define COMPILER_UNKNOWN
#endif

#if defined(COMPILER_MSVC)
#  if !defined(_MSVC_LANG)
#    define COMPILER_CPP_VERSION __cplusplus
#  else
#    define COMPILER_CPP_VERSION _MSVC_LANG
#  endif
#else
#  define COMPILER_CPP_VERSION __cplusplus
#endif

#ifdef UTIL_XCAT
#  undef UTIL_XCAT
#endif
#ifdef UTIL_CAT
#  undef UTIL_CAT
#endif

#define UTIL_XCAT(x, y) x ## y
#define UTIL_CAT(x, y) UTIL_XCAT(x, y)

#endif //STATIC_REFLECTION_COMPILER_MACROS_H


#ifndef STATIC_REFLECTION_LITERAL_TYPE_HPP
#define STATIC_REFLECTION_LITERAL_TYPE_HPP

#if defined(COMPILER_UNKNOWN)
# error Compiler currently unsupported.
#endif

#if COMPILER_CPP_VERSION < 201402L
#  error "This version of c++ is not supported."
#endif

#if COMPILER_CPP_VERSION >= 202002L && !defined(COMPILER_ICC) && !defined(__APPLE__)
#  define SHOULD_USE_NEW_STRING_INTERNING 1
#else
#  define SHOULD_USE_NEW_STRING_INTERNING 0
#endif

#if !defined( COMPILER_MSVC ) && defined( __GNUC__ )
#  define SHOULD_USE_LITERAL_OPERATOR_TEMPLATE 1
#else
#  define SHOULD_USE_LITERAL_OPERATOR_TEMPLATE 0
#endif

#define N3599

#ifndef LITERAL_POWER
#  define LITERAL_POWER 512
#endif

#include <algorithm>
#include <cstdint>
#include <type_traits>
#include <utility>

namespace rflct {
    template <char...CC>
    struct Char_pack {
        static constexpr char const data[sizeof...(CC)]{CC...};
        static_assert(data[sizeof...(CC) - 1] == '\0', "interned string was too long, see $(...) macro");
    };

    template <char...CC>
    constexpr char const Char_pack<CC...>::data[];

    template <typename T>
    struct is_char_pack {
        static constexpr bool value = false;
    };

    template <char...NN>
    struct is_char_pack<Char_pack<NN...> > {
        static constexpr bool value = true;
    };

    template <std::size_t Pos, char...CC, std::size_t...NN>
    consteval auto make_substr_pack(Char_pack<CC...>, std::index_sequence<NN...>) {
        static_assert(sizeof...(NN) < sizeof...(CC) - Pos, "Out of bounds index.");
        return Char_pack<Char_pack<CC...>::data[Pos + NN]..., '\0'>{};
    }

    template <typename S, std::size_t Pos, std::size_t Count>
    class make_substr_pack_t {
            static constexpr auto value = make_substr_pack<Pos>(S{}, std::make_index_sequence<Count>{});
        public:
            using type = typename std::remove_cv_t<decltype(value)>;
    };

    template <typename S, std::size_t Pos, std::size_t Count>
    using substr_t = typename make_substr_pack_t<S, Pos, Count>::type;
}

# if SHOULD_USE_NEW_STRING_INTERNING
#  define $( s ) s
#  define $post( s ) rflct::str_t<s>
#  define $String( S ) rflct::String String_value, typename S = rflct::str_t<String_value>

namespace rflct {
    template <std::size_t N>
    struct String
    {
        consteval String(const char(&arr)[N]) { std::copy(arr, arr + N, data); }
        static constexpr std::size_t size = N;
        char data[N];
    };

    template <String S, std::size_t...NN>
    consteval auto make_char_pack(std::index_sequence<NN...>)
    {
        return Char_pack<S.data[NN]...>{};
    }

    template <
            String S,
            auto V = make_char_pack<S>(std::make_index_sequence<decltype(S)::size>{})
            >
    using str_t = decltype(V);

}

# else //!SHOULD_USE_NEW_STRING_INTERNING
#  define $String( S ) typename S

namespace rflct::detail {
    template <std::size_t N>
    constexpr char ch(char const(&s)[N], int i) { return i < N ? s[i] : '\0'; }

    template <std::size_t N, char...CC>
    using non_GNU_cull = substr_t<Char_pack<CC...>, 0, N - 1>;
}

#   define $c( a, b ) rflct::detail::ch( a, b )

#   define $4( s )    rflct::detail::non_GNU_cull<sizeof(s), $c(s,0),$c(s,1),$c(s,2),$c(s,3),$c(s,4)>
#   define $8( s )    rflct::detail::non_GNU_cull<sizeof(s), $c(s,0),$c(s,1),$c(s,2),$c(s,3),$c(s,4),$c(s,5),$c(s,6),$c(s,7),$c(s,8)>
#   define $16( s )   rflct::detail::non_GNU_cull<sizeof(s), $c(s,0),$c(s,1),$c(s,2),$c(s,3),$c(s,4),$c(s,5),$c(s,6),$c(s,7),$c(s,8),$c(s,9),$c(s,10),$c(s,11),$c(s,12),$c(s,13),$c(s,14),$c(s,15),$c(s,16)>
#   define $32( s )   rflct::detail::non_GNU_cull<sizeof(s), $c(s,0),$c(s,1),$c(s,2),$c(s,3),$c(s,4),$c(s,5),$c(s,6),$c(s,7),$c(s,8),$c(s,9),$c(s,10),$c(s,11),$c(s,12),$c(s,13),$c(s,14),$c(s,15),$c(s,16),$c(s,17),$c(s,18),$c(s,19),$c(s,20),$c(s,21),$c(s,22),$c(s,23),$c(s,24),$c(s,25),$c(s,26),$c(s,27),$c(s,28),$c(s,29),$c(s,30),$c(s,31),$c(s,32)>
#   define $64( s )   rflct::detail::non_GNU_cull<sizeof(s), $c(s,0),$c(s,1),$c(s,2),$c(s,3),$c(s,4),$c(s,5),$c(s,6),$c(s,7),$c(s,8),$c(s,9),$c(s,10),$c(s,11),$c(s,12),$c(s,13),$c(s,14),$c(s,15),$c(s,16),$c(s,17),$c(s,18),$c(s,19),$c(s,20),$c(s,21),$c(s,22),$c(s,23),$c(s,24),$c(s,25),$c(s,26),$c(s,27),$c(s,28),$c(s,29),$c(s,30),$c(s,31),$c(s,32),$c(s,33),$c(s,34),$c(s,35),$c(s,36),$c(s,37),$c(s,38),$c(s,39),$c(s,40),$c(s,41),$c(s,42),$c(s,43),$c(s,44),$c(s,45),$c(s,46),$c(s,47),$c(s,48),$c(s,49),$c(s,50),$c(s,51),$c(s,52),$c(s,53),$c(s,54),$c(s,55),$c(s,56),$c(s,57),$c(s,58),$c(s,59),$c(s,60),$c(s,61),$c(s,62),$c(s,63),$c(s,64)>
#   define $128( s )  rflct::detail::non_GNU_cull<sizeof(s), $c(s,0),$c(s,1),$c(s,2),$c(s,3),$c(s,4),$c(s,5),$c(s,6),$c(s,7),$c(s,8),$c(s,9),$c(s,10),$c(s,11),$c(s,12),$c(s,13),$c(s,14),$c(s,15),$c(s,16),$c(s,17),$c(s,18),$c(s,19),$c(s,20),$c(s,21),$c(s,22),$c(s,23),$c(s,24),$c(s,25),$c(s,26),$c(s,27),$c(s,28),$c(s,29),$c(s,30),$c(s,31),$c(s,32),$c(s,33),$c(s,34),$c(s,35),$c(s,36),$c(s,37),$c(s,38),$c(s,39),$c(s,40),$c(s,41),$c(s,42),$c(s,43),$c(s,44),$c(s,45),$c(s,46),$c(s,47),$c(s,48),$c(s,49),$c(s,50),$c(s,51),$c(s,52),$c(s,53),$c(s,54),$c(s,55),$c(s,56),$c(s,57),$c(s,58),$c(s,59),$c(s,60),$c(s,61),$c(s,62),$c(s,63),$c(s,64),$c(s,65),$c(s,66),$c(s,67),$c(s,68),$c(s,69),$c(s,70),$c(s,71),$c(s,72),$c(s,73),$c(s,74),$c(s,75),$c(s,76),$c(s,77),$c(s,78),$c(s,79),$c(s,80),$c(s,81),$c(s,82),$c(s,83),$c(s,84),$c(s,85),$c(s,86),$c(s,87),$c(s,88),$c(s,89),$c(s,90),$c(s,91),$c(s,92),$c(s,93),$c(s,94),$c(s,95),$c(s,96),$c(s,97),$c(s,98),$c(s,99),$c(s,100),$c(s,101),$c(s,102),$c(s,103),$c(s,104),$c(s,105),$c(s,106),$c(s,107),$c(s,108),$c(s,109),$c(s,110),$c(s,111),$c(s,112),$c(s,113),$c(s,114),$c(s,115),$c(s,116),$c(s,117),$c(s,118),$c(s,119),$c(s,120),$c(s,121),$c(s,122),$c(s,123),$c(s,124),$c(s,125),$c(s,126),$c(s,127),$c(s,128)>
#   define $256( s )  rflct::detail::non_GNU_cull<sizeof(s), $c(s,0),$c(s,1),$c(s,2),$c(s,3),$c(s,4),$c(s,5),$c(s,6),$c(s,7),$c(s,8),$c(s,9),$c(s,10),$c(s,11),$c(s,12),$c(s,13),$c(s,14),$c(s,15),$c(s,16),$c(s,17),$c(s,18),$c(s,19),$c(s,20),$c(s,21),$c(s,22),$c(s,23),$c(s,24),$c(s,25),$c(s,26),$c(s,27),$c(s,28),$c(s,29),$c(s,30),$c(s,31),$c(s,32),$c(s,33),$c(s,34),$c(s,35),$c(s,36),$c(s,37),$c(s,38),$c(s,39),$c(s,40),$c(s,41),$c(s,42),$c(s,43),$c(s,44),$c(s,45),$c(s,46),$c(s,47),$c(s,48),$c(s,49),$c(s,50),$c(s,51),$c(s,52),$c(s,53),$c(s,54),$c(s,55),$c(s,56),$c(s,57),$c(s,58),$c(s,59),$c(s,60),$c(s,61),$c(s,62),$c(s,63),$c(s,64),$c(s,65),$c(s,66),$c(s,67),$c(s,68),$c(s,69),$c(s,70),$c(s,71),$c(s,72),$c(s,73),$c(s,74),$c(s,75),$c(s,76),$c(s,77),$c(s,78),$c(s,79),$c(s,80),$c(s,81),$c(s,82),$c(s,83),$c(s,84),$c(s,85),$c(s,86),$c(s,87),$c(s,88),$c(s,89),$c(s,90),$c(s,91),$c(s,92),$c(s,93),$c(s,94),$c(s,95),$c(s,96),$c(s,97),$c(s,98),$c(s,99),$c(s,100),$c(s,101),$c(s,102),$c(s,103),$c(s,104),$c(s,105),$c(s,106),$c(s,107),$c(s,108),$c(s,109),$c(s,110),$c(s,111),$c(s,112),$c(s,113),$c(s,114),$c(s,115),$c(s,116),$c(s,117),$c(s,118),$c(s,119),$c(s,120),$c(s,121),$c(s,122),$c(s,123),$c(s,124),$c(s,125),$c(s,126),$c(s,127),$c(s,128),$c(s,129),$c(s,130),$c(s,131),$c(s,132),$c(s,133),$c(s,134),$c(s,135),$c(s,136),$c(s,137),$c(s,138),$c(s,139),$c(s,140),$c(s,141),$c(s,142),$c(s,143),$c(s,144),$c(s,145),$c(s,146),$c(s,147),$c(s,148),$c(s,149),$c(s,150),$c(s,151),$c(s,152),$c(s,153),$c(s,154),$c(s,155),$c(s,156),$c(s,157),$c(s,158),$c(s,159),$c(s,160),$c(s,161),$c(s,162),$c(s,163),$c(s,164),$c(s,165),$c(s,166),$c(s,167),$c(s,168),$c(s,169),$c(s,170),$c(s,171),$c(s,172),$c(s,173),$c(s,174),$c(s,175),$c(s,176),$c(s,177),$c(s,178),$c(s,179),$c(s,180),$c(s,181),$c(s,182),$c(s,183),$c(s,184),$c(s,185),$c(s,186),$c(s,187),$c(s,188),$c(s,189),$c(s,190),$c(s,191),$c(s,192),$c(s,193),$c(s,194),$c(s,195),$c(s,196),$c(s,197),$c(s,198),$c(s,199),$c(s,200),$c(s,201),$c(s,202),$c(s,203),$c(s,204),$c(s,205),$c(s,206),$c(s,207),$c(s,208),$c(s,209),$c(s,210),$c(s,211),$c(s,212),$c(s,213),$c(s,214),$c(s,215),$c(s,216),$c(s,217),$c(s,218),$c(s,219),$c(s,220),$c(s,221),$c(s,222),$c(s,223),$c(s,224),$c(s,225),$c(s,226),$c(s,227),$c(s,228),$c(s,229),$c(s,230),$c(s,231),$c(s,232),$c(s,233),$c(s,234),$c(s,235),$c(s,236),$c(s,237),$c(s,238),$c(s,239),$c(s,240),$c(s,241),$c(s,242),$c(s,243),$c(s,244),$c(s,245),$c(s,246),$c(s,247),$c(s,248),$c(s,249),$c(s,250),$c(s,251),$c(s,252),$c(s,253),$c(s,254),$c(s,255),$c(s,256)>
#   define $512( s )  rflct::detail::non_GNU_cull<sizeof(s), $c(s,0),$c(s,1),$c(s,2),$c(s,3),$c(s,4),$c(s,5),$c(s,6),$c(s,7),$c(s,8),$c(s,9),$c(s,10),$c(s,11),$c(s,12),$c(s,13),$c(s,14),$c(s,15),$c(s,16),$c(s,17),$c(s,18),$c(s,19),$c(s,20),$c(s,21),$c(s,22),$c(s,23),$c(s,24),$c(s,25),$c(s,26),$c(s,27),$c(s,28),$c(s,29),$c(s,30),$c(s,31),$c(s,32),$c(s,33),$c(s,34),$c(s,35),$c(s,36),$c(s,37),$c(s,38),$c(s,39),$c(s,40),$c(s,41),$c(s,42),$c(s,43),$c(s,44),$c(s,45),$c(s,46),$c(s,47),$c(s,48),$c(s,49),$c(s,50),$c(s,51),$c(s,52),$c(s,53),$c(s,54),$c(s,55),$c(s,56),$c(s,57),$c(s,58),$c(s,59),$c(s,60),$c(s,61),$c(s,62),$c(s,63),$c(s,64),$c(s,65),$c(s,66),$c(s,67),$c(s,68),$c(s,69),$c(s,70),$c(s,71),$c(s,72),$c(s,73),$c(s,74),$c(s,75),$c(s,76),$c(s,77),$c(s,78),$c(s,79),$c(s,80),$c(s,81),$c(s,82),$c(s,83),$c(s,84),$c(s,85),$c(s,86),$c(s,87),$c(s,88),$c(s,89),$c(s,90),$c(s,91),$c(s,92),$c(s,93),$c(s,94),$c(s,95),$c(s,96),$c(s,97),$c(s,98),$c(s,99),$c(s,100),$c(s,101),$c(s,102),$c(s,103),$c(s,104),$c(s,105),$c(s,106),$c(s,107),$c(s,108),$c(s,109),$c(s,110),$c(s,111),$c(s,112),$c(s,113),$c(s,114),$c(s,115),$c(s,116),$c(s,117),$c(s,118),$c(s,119),$c(s,120),$c(s,121),$c(s,122),$c(s,123),$c(s,124),$c(s,125),$c(s,126),$c(s,127),$c(s,128),$c(s,129),$c(s,130),$c(s,131),$c(s,132),$c(s,133),$c(s,134),$c(s,135),$c(s,136),$c(s,137),$c(s,138),$c(s,139),$c(s,140),$c(s,141),$c(s,142),$c(s,143),$c(s,144),$c(s,145),$c(s,146),$c(s,147),$c(s,148),$c(s,149),$c(s,150),$c(s,151),$c(s,152),$c(s,153),$c(s,154),$c(s,155),$c(s,156),$c(s,157),$c(s,158),$c(s,159),$c(s,160),$c(s,161),$c(s,162),$c(s,163),$c(s,164),$c(s,165),$c(s,166),$c(s,167),$c(s,168),$c(s,169),$c(s,170),$c(s,171),$c(s,172),$c(s,173),$c(s,174),$c(s,175),$c(s,176),$c(s,177),$c(s,178),$c(s,179),$c(s,180),$c(s,181),$c(s,182),$c(s,183),$c(s,184),$c(s,185),$c(s,186),$c(s,187),$c(s,188),$c(s,189),$c(s,190),$c(s,191),$c(s,192),$c(s,193),$c(s,194),$c(s,195),$c(s,196),$c(s,197),$c(s,198),$c(s,199),$c(s,200),$c(s,201),$c(s,202),$c(s,203),$c(s,204),$c(s,205),$c(s,206),$c(s,207),$c(s,208),$c(s,209),$c(s,210),$c(s,211),$c(s,212),$c(s,213),$c(s,214),$c(s,215),$c(s,216),$c(s,217),$c(s,218),$c(s,219),$c(s,220),$c(s,221),$c(s,222),$c(s,223),$c(s,224),$c(s,225),$c(s,226),$c(s,227),$c(s,228),$c(s,229),$c(s,230),$c(s,231),$c(s,232),$c(s,233),$c(s,234),$c(s,235),$c(s,236),$c(s,237),$c(s,238),$c(s,239),$c(s,240),$c(s,241),$c(s,242),$c(s,243),$c(s,244),$c(s,245),$c(s,246),$c(s,247),$c(s,248),$c(s,249),$c(s,250),$c(s,251),$c(s,252),$c(s,253),$c(s,254),$c(s,255),$c(s,256),$c(s,257),$c(s,258),$c(s,259),$c(s,260),$c(s,261),$c(s,262),$c(s,263),$c(s,264),$c(s,265),$c(s,266),$c(s,267),$c(s,268),$c(s,269),$c(s,270),$c(s,271),$c(s,272),$c(s,273),$c(s,274),$c(s,275),$c(s,276),$c(s,277),$c(s,278),$c(s,279),$c(s,280),$c(s,281),$c(s,282),$c(s,283),$c(s,284),$c(s,285),$c(s,286),$c(s,287),$c(s,288),$c(s,289),$c(s,290),$c(s,291),$c(s,292),$c(s,293),$c(s,294),$c(s,295),$c(s,296),$c(s,297),$c(s,298),$c(s,299),$c(s,300),$c(s,301),$c(s,302),$c(s,303),$c(s,304),$c(s,305),$c(s,306),$c(s,307),$c(s,308),$c(s,309),$c(s,310),$c(s,311),$c(s,312),$c(s,313),$c(s,314),$c(s,315),$c(s,316),$c(s,317),$c(s,318),$c(s,319),$c(s,320),$c(s,321),$c(s,322),$c(s,323),$c(s,324),$c(s,325),$c(s,326),$c(s,327),$c(s,328),$c(s,329),$c(s,330),$c(s,331),$c(s,332),$c(s,333),$c(s,334),$c(s,335),$c(s,336),$c(s,337),$c(s,338),$c(s,339),$c(s,340),$c(s,341),$c(s,342),$c(s,343),$c(s,344),$c(s,345),$c(s,346),$c(s,347),$c(s,348),$c(s,349),$c(s,350),$c(s,351),$c(s,352),$c(s,353),$c(s,354),$c(s,355),$c(s,356),$c(s,357),$c(s,358),$c(s,359),$c(s,360),$c(s,361),$c(s,362),$c(s,363),$c(s,364),$c(s,365),$c(s,366),$c(s,367),$c(s,368),$c(s,369),$c(s,370),$c(s,371),$c(s,372),$c(s,373),$c(s,374),$c(s,375),$c(s,376),$c(s,377),$c(s,378),$c(s,379),$c(s,380),$c(s,381),$c(s,382),$c(s,383),$c(s,384),$c(s,385),$c(s,386),$c(s,387),$c(s,388),$c(s,389),$c(s,390),$c(s,391),$c(s,392),$c(s,393),$c(s,394),$c(s,395),$c(s,396),$c(s,397),$c(s,398),$c(s,399),$c(s,400),$c(s,401),$c(s,402),$c(s,403),$c(s,404),$c(s,405),$c(s,406),$c(s,407),$c(s,408),$c(s,409),$c(s,410),$c(s,411),$c(s,412),$c(s,413),$c(s,414),$c(s,415),$c(s,416),$c(s,417),$c(s,418),$c(s,419),$c(s,420),$c(s,421),$c(s,422),$c(s,423),$c(s,424),$c(s,425),$c(s,426),$c(s,427),$c(s,428),$c(s,429),$c(s,430),$c(s,431),$c(s,432),$c(s,433),$c(s,434),$c(s,435),$c(s,436),$c(s,437),$c(s,438),$c(s,439),$c(s,440),$c(s,441),$c(s,442),$c(s,443),$c(s,444),$c(s,445),$c(s,446),$c(s,447),$c(s,448),$c(s,449),$c(s,450),$c(s,451),$c(s,452),$c(s,453),$c(s,454),$c(s,455),$c(s,456),$c(s,457),$c(s,458),$c(s,459),$c(s,460),$c(s,461),$c(s,462),$c(s,463),$c(s,464),$c(s,465),$c(s,466),$c(s,467),$c(s,468),$c(s,469),$c(s,470),$c(s,471),$c(s,472),$c(s,473),$c(s,474),$c(s,475),$c(s,476),$c(s,477),$c(s,478),$c(s,479),$c(s,480),$c(s,481),$c(s,482),$c(s,483),$c(s,484),$c(s,485),$c(s,486),$c(s,487),$c(s,488),$c(s,489),$c(s,490),$c(s,491),$c(s,492),$c(s,493),$c(s,494),$c(s,495),$c(s,496),$c(s,497),$c(s,498),$c(s,499),$c(s,500),$c(s,501),$c(s,502),$c(s,503),$c(s,504),$c(s,505),$c(s,506),$c(s,507),$c(s,508),$c(s,509),$c(s,510),$c(s,511),$c(s,512)>
#   define $1024( s ) rflct::detail::non_GNU_cull<sizeof(s), $c(s,0),$c(s,1),$c(s,2),$c(s,3),$c(s,4),$c(s,5),$c(s,6),$c(s,7),$c(s,8),$c(s,9),$c(s,10),$c(s,11),$c(s,12),$c(s,13),$c(s,14),$c(s,15),$c(s,16),$c(s,17),$c(s,18),$c(s,19),$c(s,20),$c(s,21),$c(s,22),$c(s,23),$c(s,24),$c(s,25),$c(s,26),$c(s,27),$c(s,28),$c(s,29),$c(s,30),$c(s,31),$c(s,32),$c(s,33),$c(s,34),$c(s,35),$c(s,36),$c(s,37),$c(s,38),$c(s,39),$c(s,40),$c(s,41),$c(s,42),$c(s,43),$c(s,44),$c(s,45),$c(s,46),$c(s,47),$c(s,48),$c(s,49),$c(s,50),$c(s,51),$c(s,52),$c(s,53),$c(s,54),$c(s,55),$c(s,56),$c(s,57),$c(s,58),$c(s,59),$c(s,60),$c(s,61),$c(s,62),$c(s,63),$c(s,64),$c(s,65),$c(s,66),$c(s,67),$c(s,68),$c(s,69),$c(s,70),$c(s,71),$c(s,72),$c(s,73),$c(s,74),$c(s,75),$c(s,76),$c(s,77),$c(s,78),$c(s,79),$c(s,80),$c(s,81),$c(s,82),$c(s,83),$c(s,84),$c(s,85),$c(s,86),$c(s,87),$c(s,88),$c(s,89),$c(s,90),$c(s,91),$c(s,92),$c(s,93),$c(s,94),$c(s,95),$c(s,96),$c(s,97),$c(s,98),$c(s,99),$c(s,100),$c(s,101),$c(s,102),$c(s,103),$c(s,104),$c(s,105),$c(s,106),$c(s,107),$c(s,108),$c(s,109),$c(s,110),$c(s,111),$c(s,112),$c(s,113),$c(s,114),$c(s,115),$c(s,116),$c(s,117),$c(s,118),$c(s,119),$c(s,120),$c(s,121),$c(s,122),$c(s,123),$c(s,124),$c(s,125),$c(s,126),$c(s,127),$c(s,128),$c(s,129),$c(s,130),$c(s,131),$c(s,132),$c(s,133),$c(s,134),$c(s,135),$c(s,136),$c(s,137),$c(s,138),$c(s,139),$c(s,140),$c(s,141),$c(s,142),$c(s,143),$c(s,144),$c(s,145),$c(s,146),$c(s,147),$c(s,148),$c(s,149),$c(s,150),$c(s,151),$c(s,152),$c(s,153),$c(s,154),$c(s,155),$c(s,156),$c(s,157),$c(s,158),$c(s,159),$c(s,160),$c(s,161),$c(s,162),$c(s,163),$c(s,164),$c(s,165),$c(s,166),$c(s,167),$c(s,168),$c(s,169),$c(s,170),$c(s,171),$c(s,172),$c(s,173),$c(s,174),$c(s,175),$c(s,176),$c(s,177),$c(s,178),$c(s,179),$c(s,180),$c(s,181),$c(s,182),$c(s,183),$c(s,184),$c(s,185),$c(s,186),$c(s,187),$c(s,188),$c(s,189),$c(s,190),$c(s,191),$c(s,192),$c(s,193),$c(s,194),$c(s,195),$c(s,196),$c(s,197),$c(s,198),$c(s,199),$c(s,200),$c(s,201),$c(s,202),$c(s,203),$c(s,204),$c(s,205),$c(s,206),$c(s,207),$c(s,208),$c(s,209),$c(s,210),$c(s,211),$c(s,212),$c(s,213),$c(s,214),$c(s,215),$c(s,216),$c(s,217),$c(s,218),$c(s,219),$c(s,220),$c(s,221),$c(s,222),$c(s,223),$c(s,224),$c(s,225),$c(s,226),$c(s,227),$c(s,228),$c(s,229),$c(s,230),$c(s,231),$c(s,232),$c(s,233),$c(s,234),$c(s,235),$c(s,236),$c(s,237),$c(s,238),$c(s,239),$c(s,240),$c(s,241),$c(s,242),$c(s,243),$c(s,244),$c(s,245),$c(s,246),$c(s,247),$c(s,248),$c(s,249),$c(s,250),$c(s,251),$c(s,252),$c(s,253),$c(s,254),$c(s,255),$c(s,256),$c(s,257),$c(s,258),$c(s,259),$c(s,260),$c(s,261),$c(s,262),$c(s,263),$c(s,264),$c(s,265),$c(s,266),$c(s,267),$c(s,268),$c(s,269),$c(s,270),$c(s,271),$c(s,272),$c(s,273),$c(s,274),$c(s,275),$c(s,276),$c(s,277),$c(s,278),$c(s,279),$c(s,280),$c(s,281),$c(s,282),$c(s,283),$c(s,284),$c(s,285),$c(s,286),$c(s,287),$c(s,288),$c(s,289),$c(s,290),$c(s,291),$c(s,292),$c(s,293),$c(s,294),$c(s,295),$c(s,296),$c(s,297),$c(s,298),$c(s,299),$c(s,300),$c(s,301),$c(s,302),$c(s,303),$c(s,304),$c(s,305),$c(s,306),$c(s,307),$c(s,308),$c(s,309),$c(s,310),$c(s,311),$c(s,312),$c(s,313),$c(s,314),$c(s,315),$c(s,316),$c(s,317),$c(s,318),$c(s,319),$c(s,320),$c(s,321),$c(s,322),$c(s,323),$c(s,324),$c(s,325),$c(s,326),$c(s,327),$c(s,328),$c(s,329),$c(s,330),$c(s,331),$c(s,332),$c(s,333),$c(s,334),$c(s,335),$c(s,336),$c(s,337),$c(s,338),$c(s,339),$c(s,340),$c(s,341),$c(s,342),$c(s,343),$c(s,344),$c(s,345),$c(s,346),$c(s,347),$c(s,348),$c(s,349),$c(s,350),$c(s,351),$c(s,352),$c(s,353),$c(s,354),$c(s,355),$c(s,356),$c(s,357),$c(s,358),$c(s,359),$c(s,360),$c(s,361),$c(s,362),$c(s,363),$c(s,364),$c(s,365),$c(s,366),$c(s,367),$c(s,368),$c(s,369),$c(s,370),$c(s,371),$c(s,372),$c(s,373),$c(s,374),$c(s,375),$c(s,376),$c(s,377),$c(s,378),$c(s,379),$c(s,380),$c(s,381),$c(s,382),$c(s,383),$c(s,384),$c(s,385),$c(s,386),$c(s,387),$c(s,388),$c(s,389),$c(s,390),$c(s,391),$c(s,392),$c(s,393),$c(s,394),$c(s,395),$c(s,396),$c(s,397),$c(s,398),$c(s,399),$c(s,400),$c(s,401),$c(s,402),$c(s,403),$c(s,404),$c(s,405),$c(s,406),$c(s,407),$c(s,408),$c(s,409),$c(s,410),$c(s,411),$c(s,412),$c(s,413),$c(s,414),$c(s,415),$c(s,416),$c(s,417),$c(s,418),$c(s,419),$c(s,420),$c(s,421),$c(s,422),$c(s,423),$c(s,424),$c(s,425),$c(s,426),$c(s,427),$c(s,428),$c(s,429),$c(s,430),$c(s,431),$c(s,432),$c(s,433),$c(s,434),$c(s,435),$c(s,436),$c(s,437),$c(s,438),$c(s,439),$c(s,440),$c(s,441),$c(s,442),$c(s,443),$c(s,444),$c(s,445),$c(s,446),$c(s,447),$c(s,448),$c(s,449),$c(s,450),$c(s,451),$c(s,452),$c(s,453),$c(s,454),$c(s,455),$c(s,456),$c(s,457),$c(s,458),$c(s,459),$c(s,460),$c(s,461),$c(s,462),$c(s,463),$c(s,464),$c(s,465),$c(s,466),$c(s,467),$c(s,468),$c(s,469),$c(s,470),$c(s,471),$c(s,472),$c(s,473),$c(s,474),$c(s,475),$c(s,476),$c(s,477),$c(s,478),$c(s,479),$c(s,480),$c(s,481),$c(s,482),$c(s,483),$c(s,484),$c(s,485),$c(s,486),$c(s,487),$c(s,488),$c(s,489),$c(s,490),$c(s,491),$c(s,492),$c(s,493),$c(s,494),$c(s,495),$c(s,496),$c(s,497),$c(s,498),$c(s,499),$c(s,500),$c(s,501),$c(s,502),$c(s,503),$c(s,504),$c(s,505),$c(s,506),$c(s,507),$c(s,508),$c(s,509),$c(s,510),$c(s,511),$c(s,512),$c(s,513),$c(s,514),$c(s,515),$c(s,516),$c(s,517),$c(s,518),$c(s,519),$c(s,520),$c(s,521),$c(s,522),$c(s,523),$c(s,524),$c(s,525),$c(s,526),$c(s,527),$c(s,528),$c(s,529),$c(s,530),$c(s,531),$c(s,532),$c(s,533),$c(s,534),$c(s,535),$c(s,536),$c(s,537),$c(s,538),$c(s,539),$c(s,540),$c(s,541),$c(s,542),$c(s,543),$c(s,544),$c(s,545),$c(s,546),$c(s,547),$c(s,548),$c(s,549),$c(s,550),$c(s,551),$c(s,552),$c(s,553),$c(s,554),$c(s,555),$c(s,556),$c(s,557),$c(s,558),$c(s,559),$c(s,560),$c(s,561),$c(s,562),$c(s,563),$c(s,564),$c(s,565),$c(s,566),$c(s,567),$c(s,568),$c(s,569),$c(s,570),$c(s,571),$c(s,572),$c(s,573),$c(s,574),$c(s,575),$c(s,576),$c(s,577),$c(s,578),$c(s,579),$c(s,580),$c(s,581),$c(s,582),$c(s,583),$c(s,584),$c(s,585),$c(s,586),$c(s,587),$c(s,588),$c(s,589),$c(s,590),$c(s,591),$c(s,592),$c(s,593),$c(s,594),$c(s,595),$c(s,596),$c(s,597),$c(s,598),$c(s,599),$c(s,600),$c(s,601),$c(s,602),$c(s,603),$c(s,604),$c(s,605),$c(s,606),$c(s,607),$c(s,608),$c(s,609),$c(s,610),$c(s,611),$c(s,612),$c(s,613),$c(s,614),$c(s,615),$c(s,616),$c(s,617),$c(s,618),$c(s,619),$c(s,620),$c(s,621),$c(s,622),$c(s,623),$c(s,624),$c(s,625),$c(s,626),$c(s,627),$c(s,628),$c(s,629),$c(s,630),$c(s,631),$c(s,632),$c(s,633),$c(s,634),$c(s,635),$c(s,636),$c(s,637),$c(s,638),$c(s,639),$c(s,640),$c(s,641),$c(s,642),$c(s,643),$c(s,644),$c(s,645),$c(s,646),$c(s,647),$c(s,648),$c(s,649),$c(s,650),$c(s,651),$c(s,652),$c(s,653),$c(s,654),$c(s,655),$c(s,656),$c(s,657),$c(s,658),$c(s,659),$c(s,660),$c(s,661),$c(s,662),$c(s,663),$c(s,664),$c(s,665),$c(s,666),$c(s,667),$c(s,668),$c(s,669),$c(s,670),$c(s,671),$c(s,672),$c(s,673),$c(s,674),$c(s,675),$c(s,676),$c(s,677),$c(s,678),$c(s,679),$c(s,680),$c(s,681),$c(s,682),$c(s,683),$c(s,684),$c(s,685),$c(s,686),$c(s,687),$c(s,688),$c(s,689),$c(s,690),$c(s,691),$c(s,692),$c(s,693),$c(s,694),$c(s,695),$c(s,696),$c(s,697),$c(s,698),$c(s,699),$c(s,700),$c(s,701),$c(s,702),$c(s,703),$c(s,704),$c(s,705),$c(s,706),$c(s,707),$c(s,708),$c(s,709),$c(s,710),$c(s,711),$c(s,712),$c(s,713),$c(s,714),$c(s,715),$c(s,716),$c(s,717),$c(s,718),$c(s,719),$c(s,720),$c(s,721),$c(s,722),$c(s,723),$c(s,724),$c(s,725),$c(s,726),$c(s,727),$c(s,728),$c(s,729),$c(s,730),$c(s,731),$c(s,732),$c(s,733),$c(s,734),$c(s,735),$c(s,736),$c(s,737),$c(s,738),$c(s,739),$c(s,740),$c(s,741),$c(s,742),$c(s,743),$c(s,744),$c(s,745),$c(s,746),$c(s,747),$c(s,748),$c(s,749),$c(s,750),$c(s,751),$c(s,752),$c(s,753),$c(s,754),$c(s,755),$c(s,756),$c(s,757),$c(s,758),$c(s,759),$c(s,760),$c(s,761),$c(s,762),$c(s,763),$c(s,764),$c(s,765),$c(s,766),$c(s,767),$c(s,768),$c(s,769),$c(s,770),$c(s,771),$c(s,772),$c(s,773),$c(s,774),$c(s,775),$c(s,776),$c(s,777),$c(s,778),$c(s,779),$c(s,780),$c(s,781),$c(s,782),$c(s,783),$c(s,784),$c(s,785),$c(s,786),$c(s,787),$c(s,788),$c(s,789),$c(s,790),$c(s,791),$c(s,792),$c(s,793),$c(s,794),$c(s,795),$c(s,796),$c(s,797),$c(s,798),$c(s,799),$c(s,800),$c(s,801),$c(s,802),$c(s,803),$c(s,804),$c(s,805),$c(s,806),$c(s,807),$c(s,808),$c(s,809),$c(s,810),$c(s,811),$c(s,812),$c(s,813),$c(s,814),$c(s,815),$c(s,816),$c(s,817),$c(s,818),$c(s,819),$c(s,820),$c(s,821),$c(s,822),$c(s,823),$c(s,824),$c(s,825),$c(s,826),$c(s,827),$c(s,828),$c(s,829),$c(s,830),$c(s,831),$c(s,832),$c(s,833),$c(s,834),$c(s,835),$c(s,836),$c(s,837),$c(s,838),$c(s,839),$c(s,840),$c(s,841),$c(s,842),$c(s,843),$c(s,844),$c(s,845),$c(s,846),$c(s,847),$c(s,848),$c(s,849),$c(s,850),$c(s,851),$c(s,852),$c(s,853),$c(s,854),$c(s,855),$c(s,856),$c(s,857),$c(s,858),$c(s,859),$c(s,860),$c(s,861),$c(s,862),$c(s,863),$c(s,864),$c(s,865),$c(s,866),$c(s,867),$c(s,868),$c(s,869),$c(s,870),$c(s,871),$c(s,872),$c(s,873),$c(s,874),$c(s,875),$c(s,876),$c(s,877),$c(s,878),$c(s,879),$c(s,880),$c(s,881),$c(s,882),$c(s,883),$c(s,884),$c(s,885),$c(s,886),$c(s,887),$c(s,888),$c(s,889),$c(s,890),$c(s,891),$c(s,892),$c(s,893),$c(s,894),$c(s,895),$c(s,896),$c(s,897),$c(s,898),$c(s,899),$c(s,900),$c(s,901),$c(s,902),$c(s,903),$c(s,904),$c(s,905),$c(s,906),$c(s,907),$c(s,908),$c(s,909),$c(s,910),$c(s,911),$c(s,912),$c(s,913),$c(s,914),$c(s,915),$c(s,916),$c(s,917),$c(s,918),$c(s,919),$c(s,920),$c(s,921),$c(s,922),$c(s,923),$c(s,924),$c(s,925),$c(s,926),$c(s,927),$c(s,928),$c(s,929),$c(s,930),$c(s,931),$c(s,932),$c(s,933),$c(s,934),$c(s,935),$c(s,936),$c(s,937),$c(s,938),$c(s,939),$c(s,940),$c(s,941),$c(s,942),$c(s,943),$c(s,944),$c(s,945),$c(s,946),$c(s,947),$c(s,948),$c(s,949),$c(s,950),$c(s,951),$c(s,952),$c(s,953),$c(s,954),$c(s,955),$c(s,956),$c(s,957),$c(s,958),$c(s,959),$c(s,960),$c(s,961),$c(s,962),$c(s,963),$c(s,964),$c(s,965),$c(s,966),$c(s,967),$c(s,968),$c(s,969),$c(s,970),$c(s,971),$c(s,972),$c(s,973),$c(s,974),$c(s,975),$c(s,976),$c(s,977),$c(s,978),$c(s,979),$c(s,980),$c(s,981),$c(s,982),$c(s,983),$c(s,984),$c(s,985),$c(s,986),$c(s,987),$c(s,988),$c(s,989),$c(s,990),$c(s,991),$c(s,992),$c(s,993),$c(s,994),$c(s,995),$c(s,996),$c(s,997),$c(s,998),$c(s,999),$c(s,1000),$c(s,1001),$c(s,1002),$c(s,1003),$c(s,1004),$c(s,1005),$c(s,1006),$c(s,1007),$c(s,1008),$c(s,1009),$c(s,1010),$c(s,1011),$c(s,1012),$c(s,1013),$c(s,1014),$c(s,1015),$c(s,1016),$c(s,1017),$c(s,1018),$c(s,1019),$c(s,1020),$c(s,1021),$c(s,1022),$c(s,1023),$c(s,1024)>
#   define $2048( s ) rflct::detail::non_GNU_cull<sizeof(s), $c(s,0),$c(s,1),$c(s,2),$c(s,3),$c(s,4),$c(s,5),$c(s,6),$c(s,7),$c(s,8),$c(s,9),$c(s,10),$c(s,11),$c(s,12),$c(s,13),$c(s,14),$c(s,15),$c(s,16),$c(s,17),$c(s,18),$c(s,19),$c(s,20),$c(s,21),$c(s,22),$c(s,23),$c(s,24),$c(s,25),$c(s,26),$c(s,27),$c(s,28),$c(s,29),$c(s,30),$c(s,31),$c(s,32),$c(s,33),$c(s,34),$c(s,35),$c(s,36),$c(s,37),$c(s,38),$c(s,39),$c(s,40),$c(s,41),$c(s,42),$c(s,43),$c(s,44),$c(s,45),$c(s,46),$c(s,47),$c(s,48),$c(s,49),$c(s,50),$c(s,51),$c(s,52),$c(s,53),$c(s,54),$c(s,55),$c(s,56),$c(s,57),$c(s,58),$c(s,59),$c(s,60),$c(s,61),$c(s,62),$c(s,63),$c(s,64),$c(s,65),$c(s,66),$c(s,67),$c(s,68),$c(s,69),$c(s,70),$c(s,71),$c(s,72),$c(s,73),$c(s,74),$c(s,75),$c(s,76),$c(s,77),$c(s,78),$c(s,79),$c(s,80),$c(s,81),$c(s,82),$c(s,83),$c(s,84),$c(s,85),$c(s,86),$c(s,87),$c(s,88),$c(s,89),$c(s,90),$c(s,91),$c(s,92),$c(s,93),$c(s,94),$c(s,95),$c(s,96),$c(s,97),$c(s,98),$c(s,99),$c(s,100),$c(s,101),$c(s,102),$c(s,103),$c(s,104),$c(s,105),$c(s,106),$c(s,107),$c(s,108),$c(s,109),$c(s,110),$c(s,111),$c(s,112),$c(s,113),$c(s,114),$c(s,115),$c(s,116),$c(s,117),$c(s,118),$c(s,119),$c(s,120),$c(s,121),$c(s,122),$c(s,123),$c(s,124),$c(s,125),$c(s,126),$c(s,127),$c(s,128),$c(s,129),$c(s,130),$c(s,131),$c(s,132),$c(s,133),$c(s,134),$c(s,135),$c(s,136),$c(s,137),$c(s,138),$c(s,139),$c(s,140),$c(s,141),$c(s,142),$c(s,143),$c(s,144),$c(s,145),$c(s,146),$c(s,147),$c(s,148),$c(s,149),$c(s,150),$c(s,151),$c(s,152),$c(s,153),$c(s,154),$c(s,155),$c(s,156),$c(s,157),$c(s,158),$c(s,159),$c(s,160),$c(s,161),$c(s,162),$c(s,163),$c(s,164),$c(s,165),$c(s,166),$c(s,167),$c(s,168),$c(s,169),$c(s,170),$c(s,171),$c(s,172),$c(s,173),$c(s,174),$c(s,175),$c(s,176),$c(s,177),$c(s,178),$c(s,179),$c(s,180),$c(s,181),$c(s,182),$c(s,183),$c(s,184),$c(s,185),$c(s,186),$c(s,187),$c(s,188),$c(s,189),$c(s,190),$c(s,191),$c(s,192),$c(s,193),$c(s,194),$c(s,195),$c(s,196),$c(s,197),$c(s,198),$c(s,199),$c(s,200),$c(s,201),$c(s,202),$c(s,203),$c(s,204),$c(s,205),$c(s,206),$c(s,207),$c(s,208),$c(s,209),$c(s,210),$c(s,211),$c(s,212),$c(s,213),$c(s,214),$c(s,215),$c(s,216),$c(s,217),$c(s,218),$c(s,219),$c(s,220),$c(s,221),$c(s,222),$c(s,223),$c(s,224),$c(s,225),$c(s,226),$c(s,227),$c(s,228),$c(s,229),$c(s,230),$c(s,231),$c(s,232),$c(s,233),$c(s,234),$c(s,235),$c(s,236),$c(s,237),$c(s,238),$c(s,239),$c(s,240),$c(s,241),$c(s,242),$c(s,243),$c(s,244),$c(s,245),$c(s,246),$c(s,247),$c(s,248),$c(s,249),$c(s,250),$c(s,251),$c(s,252),$c(s,253),$c(s,254),$c(s,255),$c(s,256),$c(s,257),$c(s,258),$c(s,259),$c(s,260),$c(s,261),$c(s,262),$c(s,263),$c(s,264),$c(s,265),$c(s,266),$c(s,267),$c(s,268),$c(s,269),$c(s,270),$c(s,271),$c(s,272),$c(s,273),$c(s,274),$c(s,275),$c(s,276),$c(s,277),$c(s,278),$c(s,279),$c(s,280),$c(s,281),$c(s,282),$c(s,283),$c(s,284),$c(s,285),$c(s,286),$c(s,287),$c(s,288),$c(s,289),$c(s,290),$c(s,291),$c(s,292),$c(s,293),$c(s,294),$c(s,295),$c(s,296),$c(s,297),$c(s,298),$c(s,299),$c(s,300),$c(s,301),$c(s,302),$c(s,303),$c(s,304),$c(s,305),$c(s,306),$c(s,307),$c(s,308),$c(s,309),$c(s,310),$c(s,311),$c(s,312),$c(s,313),$c(s,314),$c(s,315),$c(s,316),$c(s,317),$c(s,318),$c(s,319),$c(s,320),$c(s,321),$c(s,322),$c(s,323),$c(s,324),$c(s,325),$c(s,326),$c(s,327),$c(s,328),$c(s,329),$c(s,330),$c(s,331),$c(s,332),$c(s,333),$c(s,334),$c(s,335),$c(s,336),$c(s,337),$c(s,338),$c(s,339),$c(s,340),$c(s,341),$c(s,342),$c(s,343),$c(s,344),$c(s,345),$c(s,346),$c(s,347),$c(s,348),$c(s,349),$c(s,350),$c(s,351),$c(s,352),$c(s,353),$c(s,354),$c(s,355),$c(s,356),$c(s,357),$c(s,358),$c(s,359),$c(s,360),$c(s,361),$c(s,362),$c(s,363),$c(s,364),$c(s,365),$c(s,366),$c(s,367),$c(s,368),$c(s,369),$c(s,370),$c(s,371),$c(s,372),$c(s,373),$c(s,374),$c(s,375),$c(s,376),$c(s,377),$c(s,378),$c(s,379),$c(s,380),$c(s,381),$c(s,382),$c(s,383),$c(s,384),$c(s,385),$c(s,386),$c(s,387),$c(s,388),$c(s,389),$c(s,390),$c(s,391),$c(s,392),$c(s,393),$c(s,394),$c(s,395),$c(s,396),$c(s,397),$c(s,398),$c(s,399),$c(s,400),$c(s,401),$c(s,402),$c(s,403),$c(s,404),$c(s,405),$c(s,406),$c(s,407),$c(s,408),$c(s,409),$c(s,410),$c(s,411),$c(s,412),$c(s,413),$c(s,414),$c(s,415),$c(s,416),$c(s,417),$c(s,418),$c(s,419),$c(s,420),$c(s,421),$c(s,422),$c(s,423),$c(s,424),$c(s,425),$c(s,426),$c(s,427),$c(s,428),$c(s,429),$c(s,430),$c(s,431),$c(s,432),$c(s,433),$c(s,434),$c(s,435),$c(s,436),$c(s,437),$c(s,438),$c(s,439),$c(s,440),$c(s,441),$c(s,442),$c(s,443),$c(s,444),$c(s,445),$c(s,446),$c(s,447),$c(s,448),$c(s,449),$c(s,450),$c(s,451),$c(s,452),$c(s,453),$c(s,454),$c(s,455),$c(s,456),$c(s,457),$c(s,458),$c(s,459),$c(s,460),$c(s,461),$c(s,462),$c(s,463),$c(s,464),$c(s,465),$c(s,466),$c(s,467),$c(s,468),$c(s,469),$c(s,470),$c(s,471),$c(s,472),$c(s,473),$c(s,474),$c(s,475),$c(s,476),$c(s,477),$c(s,478),$c(s,479),$c(s,480),$c(s,481),$c(s,482),$c(s,483),$c(s,484),$c(s,485),$c(s,486),$c(s,487),$c(s,488),$c(s,489),$c(s,490),$c(s,491),$c(s,492),$c(s,493),$c(s,494),$c(s,495),$c(s,496),$c(s,497),$c(s,498),$c(s,499),$c(s,500),$c(s,501),$c(s,502),$c(s,503),$c(s,504),$c(s,505),$c(s,506),$c(s,507),$c(s,508),$c(s,509),$c(s,510),$c(s,511),$c(s,512),$c(s,513),$c(s,514),$c(s,515),$c(s,516),$c(s,517),$c(s,518),$c(s,519),$c(s,520),$c(s,521),$c(s,522),$c(s,523),$c(s,524),$c(s,525),$c(s,526),$c(s,527),$c(s,528),$c(s,529),$c(s,530),$c(s,531),$c(s,532),$c(s,533),$c(s,534),$c(s,535),$c(s,536),$c(s,537),$c(s,538),$c(s,539),$c(s,540),$c(s,541),$c(s,542),$c(s,543),$c(s,544),$c(s,545),$c(s,546),$c(s,547),$c(s,548),$c(s,549),$c(s,550),$c(s,551),$c(s,552),$c(s,553),$c(s,554),$c(s,555),$c(s,556),$c(s,557),$c(s,558),$c(s,559),$c(s,560),$c(s,561),$c(s,562),$c(s,563),$c(s,564),$c(s,565),$c(s,566),$c(s,567),$c(s,568),$c(s,569),$c(s,570),$c(s,571),$c(s,572),$c(s,573),$c(s,574),$c(s,575),$c(s,576),$c(s,577),$c(s,578),$c(s,579),$c(s,580),$c(s,581),$c(s,582),$c(s,583),$c(s,584),$c(s,585),$c(s,586),$c(s,587),$c(s,588),$c(s,589),$c(s,590),$c(s,591),$c(s,592),$c(s,593),$c(s,594),$c(s,595),$c(s,596),$c(s,597),$c(s,598),$c(s,599),$c(s,600),$c(s,601),$c(s,602),$c(s,603),$c(s,604),$c(s,605),$c(s,606),$c(s,607),$c(s,608),$c(s,609),$c(s,610),$c(s,611),$c(s,612),$c(s,613),$c(s,614),$c(s,615),$c(s,616),$c(s,617),$c(s,618),$c(s,619),$c(s,620),$c(s,621),$c(s,622),$c(s,623),$c(s,624),$c(s,625),$c(s,626),$c(s,627),$c(s,628),$c(s,629),$c(s,630),$c(s,631),$c(s,632),$c(s,633),$c(s,634),$c(s,635),$c(s,636),$c(s,637),$c(s,638),$c(s,639),$c(s,640),$c(s,641),$c(s,642),$c(s,643),$c(s,644),$c(s,645),$c(s,646),$c(s,647),$c(s,648),$c(s,649),$c(s,650),$c(s,651),$c(s,652),$c(s,653),$c(s,654),$c(s,655),$c(s,656),$c(s,657),$c(s,658),$c(s,659),$c(s,660),$c(s,661),$c(s,662),$c(s,663),$c(s,664),$c(s,665),$c(s,666),$c(s,667),$c(s,668),$c(s,669),$c(s,670),$c(s,671),$c(s,672),$c(s,673),$c(s,674),$c(s,675),$c(s,676),$c(s,677),$c(s,678),$c(s,679),$c(s,680),$c(s,681),$c(s,682),$c(s,683),$c(s,684),$c(s,685),$c(s,686),$c(s,687),$c(s,688),$c(s,689),$c(s,690),$c(s,691),$c(s,692),$c(s,693),$c(s,694),$c(s,695),$c(s,696),$c(s,697),$c(s,698),$c(s,699),$c(s,700),$c(s,701),$c(s,702),$c(s,703),$c(s,704),$c(s,705),$c(s,706),$c(s,707),$c(s,708),$c(s,709),$c(s,710),$c(s,711),$c(s,712),$c(s,713),$c(s,714),$c(s,715),$c(s,716),$c(s,717),$c(s,718),$c(s,719),$c(s,720),$c(s,721),$c(s,722),$c(s,723),$c(s,724),$c(s,725),$c(s,726),$c(s,727),$c(s,728),$c(s,729),$c(s,730),$c(s,731),$c(s,732),$c(s,733),$c(s,734),$c(s,735),$c(s,736),$c(s,737),$c(s,738),$c(s,739),$c(s,740),$c(s,741),$c(s,742),$c(s,743),$c(s,744),$c(s,745),$c(s,746),$c(s,747),$c(s,748),$c(s,749),$c(s,750),$c(s,751),$c(s,752),$c(s,753),$c(s,754),$c(s,755),$c(s,756),$c(s,757),$c(s,758),$c(s,759),$c(s,760),$c(s,761),$c(s,762),$c(s,763),$c(s,764),$c(s,765),$c(s,766),$c(s,767),$c(s,768),$c(s,769),$c(s,770),$c(s,771),$c(s,772),$c(s,773),$c(s,774),$c(s,775),$c(s,776),$c(s,777),$c(s,778),$c(s,779),$c(s,780),$c(s,781),$c(s,782),$c(s,783),$c(s,784),$c(s,785),$c(s,786),$c(s,787),$c(s,788),$c(s,789),$c(s,790),$c(s,791),$c(s,792),$c(s,793),$c(s,794),$c(s,795),$c(s,796),$c(s,797),$c(s,798),$c(s,799),$c(s,800),$c(s,801),$c(s,802),$c(s,803),$c(s,804),$c(s,805),$c(s,806),$c(s,807),$c(s,808),$c(s,809),$c(s,810),$c(s,811),$c(s,812),$c(s,813),$c(s,814),$c(s,815),$c(s,816),$c(s,817),$c(s,818),$c(s,819),$c(s,820),$c(s,821),$c(s,822),$c(s,823),$c(s,824),$c(s,825),$c(s,826),$c(s,827),$c(s,828),$c(s,829),$c(s,830),$c(s,831),$c(s,832),$c(s,833),$c(s,834),$c(s,835),$c(s,836),$c(s,837),$c(s,838),$c(s,839),$c(s,840),$c(s,841),$c(s,842),$c(s,843),$c(s,844),$c(s,845),$c(s,846),$c(s,847),$c(s,848),$c(s,849),$c(s,850),$c(s,851),$c(s,852),$c(s,853),$c(s,854),$c(s,855),$c(s,856),$c(s,857),$c(s,858),$c(s,859),$c(s,860),$c(s,861),$c(s,862),$c(s,863),$c(s,864),$c(s,865),$c(s,866),$c(s,867),$c(s,868),$c(s,869),$c(s,870),$c(s,871),$c(s,872),$c(s,873),$c(s,874),$c(s,875),$c(s,876),$c(s,877),$c(s,878),$c(s,879),$c(s,880),$c(s,881),$c(s,882),$c(s,883),$c(s,884),$c(s,885),$c(s,886),$c(s,887),$c(s,888),$c(s,889),$c(s,890),$c(s,891),$c(s,892),$c(s,893),$c(s,894),$c(s,895),$c(s,896),$c(s,897),$c(s,898),$c(s,899),$c(s,900),$c(s,901),$c(s,902),$c(s,903),$c(s,904),$c(s,905),$c(s,906),$c(s,907),$c(s,908),$c(s,909),$c(s,910),$c(s,911),$c(s,912),$c(s,913),$c(s,914),$c(s,915),$c(s,916),$c(s,917),$c(s,918),$c(s,919),$c(s,920),$c(s,921),$c(s,922),$c(s,923),$c(s,924),$c(s,925),$c(s,926),$c(s,927),$c(s,928),$c(s,929),$c(s,930),$c(s,931),$c(s,932),$c(s,933),$c(s,934),$c(s,935),$c(s,936),$c(s,937),$c(s,938),$c(s,939),$c(s,940),$c(s,941),$c(s,942),$c(s,943),$c(s,944),$c(s,945),$c(s,946),$c(s,947),$c(s,948),$c(s,949),$c(s,950),$c(s,951),$c(s,952),$c(s,953),$c(s,954),$c(s,955),$c(s,956),$c(s,957),$c(s,958),$c(s,959),$c(s,960),$c(s,961),$c(s,962),$c(s,963),$c(s,964),$c(s,965),$c(s,966),$c(s,967),$c(s,968),$c(s,969),$c(s,970),$c(s,971),$c(s,972),$c(s,973),$c(s,974),$c(s,975),$c(s,976),$c(s,977),$c(s,978),$c(s,979),$c(s,980),$c(s,981),$c(s,982),$c(s,983),$c(s,984),$c(s,985),$c(s,986),$c(s,987),$c(s,988),$c(s,989),$c(s,990),$c(s,991),$c(s,992),$c(s,993),$c(s,994),$c(s,995),$c(s,996),$c(s,997),$c(s,998),$c(s,999),$c(s,1000),$c(s,1001),$c(s,1002),$c(s,1003),$c(s,1004),$c(s,1005),$c(s,1006),$c(s,1007),$c(s,1008),$c(s,1009),$c(s,1010),$c(s,1011),$c(s,1012),$c(s,1013),$c(s,1014),$c(s,1015),$c(s,1016),$c(s,1017),$c(s,1018),$c(s,1019),$c(s,1020),$c(s,1021),$c(s,1022),$c(s,1023),$c(s,1024),$c(s,1025),$c(s,1026),$c(s,1027),$c(s,1028),$c(s,1029),$c(s,1030),$c(s,1031),$c(s,1032),$c(s,1033),$c(s,1034),$c(s,1035),$c(s,1036),$c(s,1037),$c(s,1038),$c(s,1039),$c(s,1040),$c(s,1041),$c(s,1042),$c(s,1043),$c(s,1044),$c(s,1045),$c(s,1046),$c(s,1047),$c(s,1048),$c(s,1049),$c(s,1050),$c(s,1051),$c(s,1052),$c(s,1053),$c(s,1054),$c(s,1055),$c(s,1056),$c(s,1057),$c(s,1058),$c(s,1059),$c(s,1060),$c(s,1061),$c(s,1062),$c(s,1063),$c(s,1064),$c(s,1065),$c(s,1066),$c(s,1067),$c(s,1068),$c(s,1069),$c(s,1070),$c(s,1071),$c(s,1072),$c(s,1073),$c(s,1074),$c(s,1075),$c(s,1076),$c(s,1077),$c(s,1078),$c(s,1079),$c(s,1080),$c(s,1081),$c(s,1082),$c(s,1083),$c(s,1084),$c(s,1085),$c(s,1086),$c(s,1087),$c(s,1088),$c(s,1089),$c(s,1090),$c(s,1091),$c(s,1092),$c(s,1093),$c(s,1094),$c(s,1095),$c(s,1096),$c(s,1097),$c(s,1098),$c(s,1099),$c(s,1100),$c(s,1101),$c(s,1102),$c(s,1103),$c(s,1104),$c(s,1105),$c(s,1106),$c(s,1107),$c(s,1108),$c(s,1109),$c(s,1110),$c(s,1111),$c(s,1112),$c(s,1113),$c(s,1114),$c(s,1115),$c(s,1116),$c(s,1117),$c(s,1118),$c(s,1119),$c(s,1120),$c(s,1121),$c(s,1122),$c(s,1123),$c(s,1124),$c(s,1125),$c(s,1126),$c(s,1127),$c(s,1128),$c(s,1129),$c(s,1130),$c(s,1131),$c(s,1132),$c(s,1133),$c(s,1134),$c(s,1135),$c(s,1136),$c(s,1137),$c(s,1138),$c(s,1139),$c(s,1140),$c(s,1141),$c(s,1142),$c(s,1143),$c(s,1144),$c(s,1145),$c(s,1146),$c(s,1147),$c(s,1148),$c(s,1149),$c(s,1150),$c(s,1151),$c(s,1152),$c(s,1153),$c(s,1154),$c(s,1155),$c(s,1156),$c(s,1157),$c(s,1158),$c(s,1159),$c(s,1160),$c(s,1161),$c(s,1162),$c(s,1163),$c(s,1164),$c(s,1165),$c(s,1166),$c(s,1167),$c(s,1168),$c(s,1169),$c(s,1170),$c(s,1171),$c(s,1172),$c(s,1173),$c(s,1174),$c(s,1175),$c(s,1176),$c(s,1177),$c(s,1178),$c(s,1179),$c(s,1180),$c(s,1181),$c(s,1182),$c(s,1183),$c(s,1184),$c(s,1185),$c(s,1186),$c(s,1187),$c(s,1188),$c(s,1189),$c(s,1190),$c(s,1191),$c(s,1192),$c(s,1193),$c(s,1194),$c(s,1195),$c(s,1196),$c(s,1197),$c(s,1198),$c(s,1199),$c(s,1200),$c(s,1201),$c(s,1202),$c(s,1203),$c(s,1204),$c(s,1205),$c(s,1206),$c(s,1207),$c(s,1208),$c(s,1209),$c(s,1210),$c(s,1211),$c(s,1212),$c(s,1213),$c(s,1214),$c(s,1215),$c(s,1216),$c(s,1217),$c(s,1218),$c(s,1219),$c(s,1220),$c(s,1221),$c(s,1222),$c(s,1223),$c(s,1224),$c(s,1225),$c(s,1226),$c(s,1227),$c(s,1228),$c(s,1229),$c(s,1230),$c(s,1231),$c(s,1232),$c(s,1233),$c(s,1234),$c(s,1235),$c(s,1236),$c(s,1237),$c(s,1238),$c(s,1239),$c(s,1240),$c(s,1241),$c(s,1242),$c(s,1243),$c(s,1244),$c(s,1245),$c(s,1246),$c(s,1247),$c(s,1248),$c(s,1249),$c(s,1250),$c(s,1251),$c(s,1252),$c(s,1253),$c(s,1254),$c(s,1255),$c(s,1256),$c(s,1257),$c(s,1258),$c(s,1259),$c(s,1260),$c(s,1261),$c(s,1262),$c(s,1263),$c(s,1264),$c(s,1265),$c(s,1266),$c(s,1267),$c(s,1268),$c(s,1269),$c(s,1270),$c(s,1271),$c(s,1272),$c(s,1273),$c(s,1274),$c(s,1275),$c(s,1276),$c(s,1277),$c(s,1278),$c(s,1279),$c(s,1280),$c(s,1281),$c(s,1282),$c(s,1283),$c(s,1284),$c(s,1285),$c(s,1286),$c(s,1287),$c(s,1288),$c(s,1289),$c(s,1290),$c(s,1291),$c(s,1292),$c(s,1293),$c(s,1294),$c(s,1295),$c(s,1296),$c(s,1297),$c(s,1298),$c(s,1299),$c(s,1300),$c(s,1301),$c(s,1302),$c(s,1303),$c(s,1304),$c(s,1305),$c(s,1306),$c(s,1307),$c(s,1308),$c(s,1309),$c(s,1310),$c(s,1311),$c(s,1312),$c(s,1313),$c(s,1314),$c(s,1315),$c(s,1316),$c(s,1317),$c(s,1318),$c(s,1319),$c(s,1320),$c(s,1321),$c(s,1322),$c(s,1323),$c(s,1324),$c(s,1325),$c(s,1326),$c(s,1327),$c(s,1328),$c(s,1329),$c(s,1330),$c(s,1331),$c(s,1332),$c(s,1333),$c(s,1334),$c(s,1335),$c(s,1336),$c(s,1337),$c(s,1338),$c(s,1339),$c(s,1340),$c(s,1341),$c(s,1342),$c(s,1343),$c(s,1344),$c(s,1345),$c(s,1346),$c(s,1347),$c(s,1348),$c(s,1349),$c(s,1350),$c(s,1351),$c(s,1352),$c(s,1353),$c(s,1354),$c(s,1355),$c(s,1356),$c(s,1357),$c(s,1358),$c(s,1359),$c(s,1360),$c(s,1361),$c(s,1362),$c(s,1363),$c(s,1364),$c(s,1365),$c(s,1366),$c(s,1367),$c(s,1368),$c(s,1369),$c(s,1370),$c(s,1371),$c(s,1372),$c(s,1373),$c(s,1374),$c(s,1375),$c(s,1376),$c(s,1377),$c(s,1378),$c(s,1379),$c(s,1380),$c(s,1381),$c(s,1382),$c(s,1383),$c(s,1384),$c(s,1385),$c(s,1386),$c(s,1387),$c(s,1388),$c(s,1389),$c(s,1390),$c(s,1391),$c(s,1392),$c(s,1393),$c(s,1394),$c(s,1395),$c(s,1396),$c(s,1397),$c(s,1398),$c(s,1399),$c(s,1400),$c(s,1401),$c(s,1402),$c(s,1403),$c(s,1404),$c(s,1405),$c(s,1406),$c(s,1407),$c(s,1408),$c(s,1409),$c(s,1410),$c(s,1411),$c(s,1412),$c(s,1413),$c(s,1414),$c(s,1415),$c(s,1416),$c(s,1417),$c(s,1418),$c(s,1419),$c(s,1420),$c(s,1421),$c(s,1422),$c(s,1423),$c(s,1424),$c(s,1425),$c(s,1426),$c(s,1427),$c(s,1428),$c(s,1429),$c(s,1430),$c(s,1431),$c(s,1432),$c(s,1433),$c(s,1434),$c(s,1435),$c(s,1436),$c(s,1437),$c(s,1438),$c(s,1439),$c(s,1440),$c(s,1441),$c(s,1442),$c(s,1443),$c(s,1444),$c(s,1445),$c(s,1446),$c(s,1447),$c(s,1448),$c(s,1449),$c(s,1450),$c(s,1451),$c(s,1452),$c(s,1453),$c(s,1454),$c(s,1455),$c(s,1456),$c(s,1457),$c(s,1458),$c(s,1459),$c(s,1460),$c(s,1461),$c(s,1462),$c(s,1463),$c(s,1464),$c(s,1465),$c(s,1466),$c(s,1467),$c(s,1468),$c(s,1469),$c(s,1470),$c(s,1471),$c(s,1472),$c(s,1473),$c(s,1474),$c(s,1475),$c(s,1476),$c(s,1477),$c(s,1478),$c(s,1479),$c(s,1480),$c(s,1481),$c(s,1482),$c(s,1483),$c(s,1484),$c(s,1485),$c(s,1486),$c(s,1487),$c(s,1488),$c(s,1489),$c(s,1490),$c(s,1491),$c(s,1492),$c(s,1493),$c(s,1494),$c(s,1495),$c(s,1496),$c(s,1497),$c(s,1498),$c(s,1499),$c(s,1500),$c(s,1501),$c(s,1502),$c(s,1503),$c(s,1504),$c(s,1505),$c(s,1506),$c(s,1507),$c(s,1508),$c(s,1509),$c(s,1510),$c(s,1511),$c(s,1512),$c(s,1513),$c(s,1514),$c(s,1515),$c(s,1516),$c(s,1517),$c(s,1518),$c(s,1519),$c(s,1520),$c(s,1521),$c(s,1522),$c(s,1523),$c(s,1524),$c(s,1525),$c(s,1526),$c(s,1527),$c(s,1528),$c(s,1529),$c(s,1530),$c(s,1531),$c(s,1532),$c(s,1533),$c(s,1534),$c(s,1535),$c(s,1536),$c(s,1537),$c(s,1538),$c(s,1539),$c(s,1540),$c(s,1541),$c(s,1542),$c(s,1543),$c(s,1544),$c(s,1545),$c(s,1546),$c(s,1547),$c(s,1548),$c(s,1549),$c(s,1550),$c(s,1551),$c(s,1552),$c(s,1553),$c(s,1554),$c(s,1555),$c(s,1556),$c(s,1557),$c(s,1558),$c(s,1559),$c(s,1560),$c(s,1561),$c(s,1562),$c(s,1563),$c(s,1564),$c(s,1565),$c(s,1566),$c(s,1567),$c(s,1568),$c(s,1569),$c(s,1570),$c(s,1571),$c(s,1572),$c(s,1573),$c(s,1574),$c(s,1575),$c(s,1576),$c(s,1577),$c(s,1578),$c(s,1579),$c(s,1580),$c(s,1581),$c(s,1582),$c(s,1583),$c(s,1584),$c(s,1585),$c(s,1586),$c(s,1587),$c(s,1588),$c(s,1589),$c(s,1590),$c(s,1591),$c(s,1592),$c(s,1593),$c(s,1594),$c(s,1595),$c(s,1596),$c(s,1597),$c(s,1598),$c(s,1599),$c(s,1600),$c(s,1601),$c(s,1602),$c(s,1603),$c(s,1604),$c(s,1605),$c(s,1606),$c(s,1607),$c(s,1608),$c(s,1609),$c(s,1610),$c(s,1611),$c(s,1612),$c(s,1613),$c(s,1614),$c(s,1615),$c(s,1616),$c(s,1617),$c(s,1618),$c(s,1619),$c(s,1620),$c(s,1621),$c(s,1622),$c(s,1623),$c(s,1624),$c(s,1625),$c(s,1626),$c(s,1627),$c(s,1628),$c(s,1629),$c(s,1630),$c(s,1631),$c(s,1632),$c(s,1633),$c(s,1634),$c(s,1635),$c(s,1636),$c(s,1637),$c(s,1638),$c(s,1639),$c(s,1640),$c(s,1641),$c(s,1642),$c(s,1643),$c(s,1644),$c(s,1645),$c(s,1646),$c(s,1647),$c(s,1648),$c(s,1649),$c(s,1650),$c(s,1651),$c(s,1652),$c(s,1653),$c(s,1654),$c(s,1655),$c(s,1656),$c(s,1657),$c(s,1658),$c(s,1659),$c(s,1660),$c(s,1661),$c(s,1662),$c(s,1663),$c(s,1664),$c(s,1665),$c(s,1666),$c(s,1667),$c(s,1668),$c(s,1669),$c(s,1670),$c(s,1671),$c(s,1672),$c(s,1673),$c(s,1674),$c(s,1675),$c(s,1676),$c(s,1677),$c(s,1678),$c(s,1679),$c(s,1680),$c(s,1681),$c(s,1682),$c(s,1683),$c(s,1684),$c(s,1685),$c(s,1686),$c(s,1687),$c(s,1688),$c(s,1689),$c(s,1690),$c(s,1691),$c(s,1692),$c(s,1693),$c(s,1694),$c(s,1695),$c(s,1696),$c(s,1697),$c(s,1698),$c(s,1699),$c(s,1700),$c(s,1701),$c(s,1702),$c(s,1703),$c(s,1704),$c(s,1705),$c(s,1706),$c(s,1707),$c(s,1708),$c(s,1709),$c(s,1710),$c(s,1711),$c(s,1712),$c(s,1713),$c(s,1714),$c(s,1715),$c(s,1716),$c(s,1717),$c(s,1718),$c(s,1719),$c(s,1720),$c(s,1721),$c(s,1722),$c(s,1723),$c(s,1724),$c(s,1725),$c(s,1726),$c(s,1727),$c(s,1728),$c(s,1729),$c(s,1730),$c(s,1731),$c(s,1732),$c(s,1733),$c(s,1734),$c(s,1735),$c(s,1736),$c(s,1737),$c(s,1738),$c(s,1739),$c(s,1740),$c(s,1741),$c(s,1742),$c(s,1743),$c(s,1744),$c(s,1745),$c(s,1746),$c(s,1747),$c(s,1748),$c(s,1749),$c(s,1750),$c(s,1751),$c(s,1752),$c(s,1753),$c(s,1754),$c(s,1755),$c(s,1756),$c(s,1757),$c(s,1758),$c(s,1759),$c(s,1760),$c(s,1761),$c(s,1762),$c(s,1763),$c(s,1764),$c(s,1765),$c(s,1766),$c(s,1767),$c(s,1768),$c(s,1769),$c(s,1770),$c(s,1771),$c(s,1772),$c(s,1773),$c(s,1774),$c(s,1775),$c(s,1776),$c(s,1777),$c(s,1778),$c(s,1779),$c(s,1780),$c(s,1781),$c(s,1782),$c(s,1783),$c(s,1784),$c(s,1785),$c(s,1786),$c(s,1787),$c(s,1788),$c(s,1789),$c(s,1790),$c(s,1791),$c(s,1792),$c(s,1793),$c(s,1794),$c(s,1795),$c(s,1796),$c(s,1797),$c(s,1798),$c(s,1799),$c(s,1800),$c(s,1801),$c(s,1802),$c(s,1803),$c(s,1804),$c(s,1805),$c(s,1806),$c(s,1807),$c(s,1808),$c(s,1809),$c(s,1810),$c(s,1811),$c(s,1812),$c(s,1813),$c(s,1814),$c(s,1815),$c(s,1816),$c(s,1817),$c(s,1818),$c(s,1819),$c(s,1820),$c(s,1821),$c(s,1822),$c(s,1823),$c(s,1824),$c(s,1825),$c(s,1826),$c(s,1827),$c(s,1828),$c(s,1829),$c(s,1830),$c(s,1831),$c(s,1832),$c(s,1833),$c(s,1834),$c(s,1835),$c(s,1836),$c(s,1837),$c(s,1838),$c(s,1839),$c(s,1840),$c(s,1841),$c(s,1842),$c(s,1843),$c(s,1844),$c(s,1845),$c(s,1846),$c(s,1847),$c(s,1848),$c(s,1849),$c(s,1850),$c(s,1851),$c(s,1852),$c(s,1853),$c(s,1854),$c(s,1855),$c(s,1856),$c(s,1857),$c(s,1858),$c(s,1859),$c(s,1860),$c(s,1861),$c(s,1862),$c(s,1863),$c(s,1864),$c(s,1865),$c(s,1866),$c(s,1867),$c(s,1868),$c(s,1869),$c(s,1870),$c(s,1871),$c(s,1872),$c(s,1873),$c(s,1874),$c(s,1875),$c(s,1876),$c(s,1877),$c(s,1878),$c(s,1879),$c(s,1880),$c(s,1881),$c(s,1882),$c(s,1883),$c(s,1884),$c(s,1885),$c(s,1886),$c(s,1887),$c(s,1888),$c(s,1889),$c(s,1890),$c(s,1891),$c(s,1892),$c(s,1893),$c(s,1894),$c(s,1895),$c(s,1896),$c(s,1897),$c(s,1898),$c(s,1899),$c(s,1900),$c(s,1901),$c(s,1902),$c(s,1903),$c(s,1904),$c(s,1905),$c(s,1906),$c(s,1907),$c(s,1908),$c(s,1909),$c(s,1910),$c(s,1911),$c(s,1912),$c(s,1913),$c(s,1914),$c(s,1915),$c(s,1916),$c(s,1917),$c(s,1918),$c(s,1919),$c(s,1920),$c(s,1921),$c(s,1922),$c(s,1923),$c(s,1924),$c(s,1925),$c(s,1926),$c(s,1927),$c(s,1928),$c(s,1929),$c(s,1930),$c(s,1931),$c(s,1932),$c(s,1933),$c(s,1934),$c(s,1935),$c(s,1936),$c(s,1937),$c(s,1938),$c(s,1939),$c(s,1940),$c(s,1941),$c(s,1942),$c(s,1943),$c(s,1944),$c(s,1945),$c(s,1946),$c(s,1947),$c(s,1948),$c(s,1949),$c(s,1950),$c(s,1951),$c(s,1952),$c(s,1953),$c(s,1954),$c(s,1955),$c(s,1956),$c(s,1957),$c(s,1958),$c(s,1959),$c(s,1960),$c(s,1961),$c(s,1962),$c(s,1963),$c(s,1964),$c(s,1965),$c(s,1966),$c(s,1967),$c(s,1968),$c(s,1969),$c(s,1970),$c(s,1971),$c(s,1972),$c(s,1973),$c(s,1974),$c(s,1975),$c(s,1976),$c(s,1977),$c(s,1978),$c(s,1979),$c(s,1980),$c(s,1981),$c(s,1982),$c(s,1983),$c(s,1984),$c(s,1985),$c(s,1986),$c(s,1987),$c(s,1988),$c(s,1989),$c(s,1990),$c(s,1991),$c(s,1992),$c(s,1993),$c(s,1994),$c(s,1995),$c(s,1996),$c(s,1997),$c(s,1998),$c(s,1999),$c(s,2000),$c(s,2001),$c(s,2002),$c(s,2003),$c(s,2004),$c(s,2005),$c(s,2006),$c(s,2007),$c(s,2008),$c(s,2009),$c(s,2010),$c(s,2011),$c(s,2012),$c(s,2013),$c(s,2014),$c(s,2015),$c(s,2016),$c(s,2017),$c(s,2018),$c(s,2019),$c(s,2020),$c(s,2021),$c(s,2022),$c(s,2023),$c(s,2024),$c(s,2025),$c(s,2026),$c(s,2027),$c(s,2028),$c(s,2029),$c(s,2030),$c(s,2031),$c(s,2032),$c(s,2033),$c(s,2034),$c(s,2035),$c(s,2036),$c(s,2037),$c(s,2038),$c(s,2039),$c(s,2040),$c(s,2041),$c(s,2042),$c(s,2043),$c(s,2044),$c(s,2045),$c(s,2046),$c(s,2047),$c(s,2048)>


#  if SHOULD_USE_LITERAL_OPERATOR_TEMPLATE

template <typename T, T... CC>
auto operator ""_intern_string() { return rflct::Char_pack<CC..., T{}>{}; }

#   define $( s ) decltype( s ## _intern_string )
#   define $post( s ) UTIL_CAT($, LITERAL_POWER) ( s )

#  else //!SHOULD_USE_LITERAL_OPERATOR_TEMPLATE
#   define $( s ) UTIL_CAT($, LITERAL_POWER)( s )
#   define $post( s ) UTIL_CAT($, LITERAL_POWER)( s )
#  endif //SHOULD_USE_LITERAL_OPERATOR_TEMPLATE
# endif //SHOULD_USE_NEW_STRING_INTERNING
#endif //STATIC_REFLECTION_LITERAL_TYPE_HPP


#ifndef STATIC_REFLECTION_EXTRACT_TYPENAME_HPP
#define STATIC_REFLECTION_EXTRACT_TYPENAME_HPP

#if defined(COMPILER_GCC)
#  define $func_name __PRETTY_FUNCTION__
#  define $pretty_front "constexpr auto rflct::extract_typename_impl() [with T = "
#  define $pretty_back "]"
#elif defined(COMPILER_CLANG)
#  define $func_name __PRETTY_FUNCTION__
#  define $pretty_front "auto rflct::extract_typename_impl() [T = "
#  define $pretty_back "]"
#elif defined(COMPILER_MSVC)
#  define $func_name __FUNCSIG__
#  define $pretty_front "auto __cdecl rflct::extract_typename_impl<"
#  define $pretty_back ">(void)"
#elif defined(COMPILER_ICC)
#  define $func_name __PRETTY_FUNCTION__
#  define $pretty_front "constexpr auto rflct::extract_typename_impl() [with T = "
#  define $pretty_back "]"
#else
#  define $func_name "<null>"
#  define $pretty_front "<"
#  define $pretty_back ">"
#endif

namespace rflct {
    template <typename T>
    constexpr auto type_name_impl() {
        constexpr std::size_t Pos = sizeof($pretty_front) - 1;
        constexpr std::size_t Back_v = sizeof($pretty_back) - 1;
        constexpr std::size_t Count = sizeof($func_name) - Pos - Back_v - 1;
        using pretty = $post( $func_name );
        using name = substr_t<pretty, Pos, Count>;
        return name{};
    }

    template <typename T>
    class Type_name {
        static constexpr auto value = type_name_impl<T>();
    public:
        using type = typename std::remove_cv_t<decltype(value)>;
    };

    template <typename T>
    using type_name_t = typename Type_name<T>::type;
}

#endif //STATIC_REFLECTION_EXTRACT_TYPENAME_HPP
